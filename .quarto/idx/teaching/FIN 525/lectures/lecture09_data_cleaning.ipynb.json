{"title":"L09: Pandas data cleaning","markdown":{"yaml":{"title":"L09: Pandas data cleaning"},"headingText":"Preliminaries","containsRefs":false,"markdown":"\n\n\nThe \"object\" data type (for the ``industry`` and ``ind_code`` columns) is a catch-all term for when Pandas can not determine the exact data type of that column (e.g. int, float, str, etc). Many times, columns containing strings will have this data type.\n\n# Missing values\n\nMissing values appear as a special code depending on the datatype of the column in which they appear: ``NaN`` (which stands for \"not a number\") for numeric data types, ``None`` or ``NaN`` for object data type, ``NaT`` for \"datetime\" columns (more on this data type later). \n\nTo find the missing values in the data, we can use the ``.isnull`` (or its equivalent: ``.isna()``):\n\nWe can drop all the rows that have any missing values using the ``.dropna()`` function:\n\nIf we want to drop the rows that have **only** missing values, we have the use ``how = 'all'`` as a parameter:\n\nIf we want to remove all raws that contain missing values in a given column, we have to use ``.loc[]`` and the ``.notnull()`` function:\n\nor we can use the ``subset`` parameter of the ``dropna`` function, which tells the function to look for missing values only in a subset of the columns: \n\n# Changing data types\n\nMany times, a particular column in our dataframe does not have the datatype we want. There are several functions that can allow us to convert one datatype to another. Below, we cover the most commonly used ones:\n\n## The \".astype\" attribute\n\nSpecify the new datatype that you want to convert to as an argument to ``.astype()``:\n\nIt may not look like ``firmid`` is a string data type now but it is. For example, the below command would not work if ``firmid`` was still numeric:\n\n## The \".to_numeric\" attribute\n\nThis is generally used to convert string (or object) data types to a numeric data type. Unlike ``.astype()`` which can be applied after the name of the dataframe we want to convert, with ``.to_numeric()``, you have to supply that dataframe as an argument:\n\nIn some situations, the ``.to_numeric()`` function will not be successful unless you specify the parameter ``errors = `coerce'``. For example, the code below would not work without that parameter (which is why I always specify it):\n\nNote that this converted the non-numeric values in the ``ind_code`` column to ``NaN``:\n\n# Duplicates and counts\n\nIn many situations, it is important to know if our data contains any duplicate entries (most of the time we want to eliminate those) as well as explicitly count duplicate entries in any particular column or set of columns in our data. We can do these operations with the ``.duplicated()`` and ``.value_counts()`` functions:\n\n## .duplicated\n\nSyntax:\n```python\nDataFrame.duplicated(subset=None, keep='first')\n```\n\nwhere the ``subset`` parameter allows us to specifies where in the dataset (which columns) we are looking for duplicated rows (if unspecified, Pandas will look for instances where an entire row is duplicated). The ``keep`` parameter allows us to specify,  \n\nTo drop duplicated data, we can use the ``.duplicated()`` function inside a ``.loc[]``:\n\nor, more commonly, using the ``.drop_duplicates()`` function:\n\nNote that the above still keeps the 4th row, and drops the 5th (a duplicate of the 4th). This is because ``keep='first'`` by default for the ``.drop_duplicates()`` function. To eliminate both duplicated rows, we would have to set ``keep=False``:\n\nNote also that the meaning of \"first\" and \"last\" for the ``keep`` parameter depends on how your dataframe happens to be sorted at the time you drop the duplicates.\n\n## .value_counts()\n\nSyntax:\n```python\nDataFrame.value_counts(subset=None, normalize=False, sort=True, ascending=False, dropna=True)\n```\n\n# Operating on text data (strings)\n\nWorking with text data is a huge topic in data analysis. The Pandas user guide offers a detailed discussion on the way the Pandas package can be used to operate on text data: https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html#. For the most part, all of this is done with the ``.str`` subpackage and its methods. \n\nHere, we cover a very small subset of the functions that are commonly used for string manipulation inside a dataframe.\n\nWe'll work on the ``df`` dataframe:\n\nIt is important to convert a text column to ``string`` format before we manipulate it with ``.str`` functions. For example, the ``industry`` column is currently of type ``object`` so we will convert it to ``string``:\n\n## Slicing into string data\n\n## Converting to lower case or upper case\n\n## Substrings\n\n## Splitting\n\n## Stripping white spaces\n\n## Chaining .str methods\n","srcMarkdownNoYaml":"\n\n# Preliminaries\n\nThe \"object\" data type (for the ``industry`` and ``ind_code`` columns) is a catch-all term for when Pandas can not determine the exact data type of that column (e.g. int, float, str, etc). Many times, columns containing strings will have this data type.\n\n# Missing values\n\nMissing values appear as a special code depending on the datatype of the column in which they appear: ``NaN`` (which stands for \"not a number\") for numeric data types, ``None`` or ``NaN`` for object data type, ``NaT`` for \"datetime\" columns (more on this data type later). \n\nTo find the missing values in the data, we can use the ``.isnull`` (or its equivalent: ``.isna()``):\n\nWe can drop all the rows that have any missing values using the ``.dropna()`` function:\n\nIf we want to drop the rows that have **only** missing values, we have the use ``how = 'all'`` as a parameter:\n\nIf we want to remove all raws that contain missing values in a given column, we have to use ``.loc[]`` and the ``.notnull()`` function:\n\nor we can use the ``subset`` parameter of the ``dropna`` function, which tells the function to look for missing values only in a subset of the columns: \n\n# Changing data types\n\nMany times, a particular column in our dataframe does not have the datatype we want. There are several functions that can allow us to convert one datatype to another. Below, we cover the most commonly used ones:\n\n## The \".astype\" attribute\n\nSpecify the new datatype that you want to convert to as an argument to ``.astype()``:\n\nIt may not look like ``firmid`` is a string data type now but it is. For example, the below command would not work if ``firmid`` was still numeric:\n\n## The \".to_numeric\" attribute\n\nThis is generally used to convert string (or object) data types to a numeric data type. Unlike ``.astype()`` which can be applied after the name of the dataframe we want to convert, with ``.to_numeric()``, you have to supply that dataframe as an argument:\n\nIn some situations, the ``.to_numeric()`` function will not be successful unless you specify the parameter ``errors = `coerce'``. For example, the code below would not work without that parameter (which is why I always specify it):\n\nNote that this converted the non-numeric values in the ``ind_code`` column to ``NaN``:\n\n# Duplicates and counts\n\nIn many situations, it is important to know if our data contains any duplicate entries (most of the time we want to eliminate those) as well as explicitly count duplicate entries in any particular column or set of columns in our data. We can do these operations with the ``.duplicated()`` and ``.value_counts()`` functions:\n\n## .duplicated\n\nSyntax:\n```python\nDataFrame.duplicated(subset=None, keep='first')\n```\n\nwhere the ``subset`` parameter allows us to specifies where in the dataset (which columns) we are looking for duplicated rows (if unspecified, Pandas will look for instances where an entire row is duplicated). The ``keep`` parameter allows us to specify,  \n\nTo drop duplicated data, we can use the ``.duplicated()`` function inside a ``.loc[]``:\n\nor, more commonly, using the ``.drop_duplicates()`` function:\n\nNote that the above still keeps the 4th row, and drops the 5th (a duplicate of the 4th). This is because ``keep='first'`` by default for the ``.drop_duplicates()`` function. To eliminate both duplicated rows, we would have to set ``keep=False``:\n\nNote also that the meaning of \"first\" and \"last\" for the ``keep`` parameter depends on how your dataframe happens to be sorted at the time you drop the duplicates.\n\n## .value_counts()\n\nSyntax:\n```python\nDataFrame.value_counts(subset=None, normalize=False, sort=True, ascending=False, dropna=True)\n```\n\n# Operating on text data (strings)\n\nWorking with text data is a huge topic in data analysis. The Pandas user guide offers a detailed discussion on the way the Pandas package can be used to operate on text data: https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html#. For the most part, all of this is done with the ``.str`` subpackage and its methods. \n\nHere, we cover a very small subset of the functions that are commonly used for string manipulation inside a dataframe.\n\nWe'll work on the ``df`` dataframe:\n\nIt is important to convert a text column to ``string`` format before we manipulate it with ``.str`` functions. For example, the ``industry`` column is currently of type ``object`` so we will convert it to ``string``:\n\n## Slicing into string data\n\n## Converting to lower case or upper case\n\n## Substrings\n\n## Splitting\n\n## Stripping white spaces\n\n## Chaining .str methods\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"lecture09_data_cleaning.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","theme":"zephyr","page-layout":"full","grid":{"sidebar-width":"400px"},"title":"L09: Pandas data cleaning"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}