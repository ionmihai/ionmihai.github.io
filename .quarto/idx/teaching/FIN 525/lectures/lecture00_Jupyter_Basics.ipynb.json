{"title":"L00: Jupyter basics","markdown":{"yaml":{"title":"L00: Jupyter basics"},"headingText":"CELLS","containsRefs":false,"markdown":"\n\nJupyter notebooks are split into \"cells\". \n\nIf you click anywhere inside a notebook, it will enclose the cell that you clicked on in a rectangle, to show you the exact contents of that cell (the cell may be empty). \n- You can then press \"Enter\" to edit the contents of that cell (the enclosing rectangle will change colors - from blue to green). \n- When you are done editing a cell, you can press \"Shift+Enter\" to run it. \n\nThe two types of cells that you will be using most often are: \n- Markdown cells\n    - Contain text in \"Markdown\" language (more on this below)\n    - Convert a cell to Markdown by clicking on it, and the pressing \"Esc\" and \"M\"\n- Code cells\n    - Contain code in language you specified by the notebook's \"kernel\" (more on this below)\n    - Convert a cell to Markdown by clicking on it, and the pressing \"Esc\" and \"Y\"\n\n\n\n## Markdown cells\nThese are cells where you write text. This cell is a Markdown cell. \nThink of Markdown as a lightweight version of Microsoft Word. \nIt allows you to format your text (indentation, bullet points, italics, etc) using pre-specified syntax (code) rather than clicking through menu items like in Work.\n\n\n## Markdown formatting\nThe following markdown cell shows you how to do basic formatting in Markdown \n\nHeaders:\n\n# Largest header\n## Second largest header\n### Third largers header\n\nLists (bullet points):\n\n- item \n    - subitem \n        - subsubitem\n        \n* item \n    * subitem \n        * subsubitem \n\nLists (numbered):\n\n1. item \n2. item \n\nLists (mixed):\n\n1. item\n    - subitem\n        - subsubitem\n            - subsubsubitem\n2. item\n    - subitem\n        - subsubitem\n            - subsubsubitem\n\nThis is how you do *italics* and this is how you do **bold**.\n\n### LaTex\nMarkdown also allows you to write mathematical formulas using LaTex syntax. \n\nFor example:\n\n$Y_{i,t} = \\alpha + \\beta X_{i,t} + \\epsilon_{i,t}$\n         \nWhich was written as \n\n         $Y_{i,t} = \\alpha + \\beta X_{i,t} + \\epsilon_{i,t}$\n\n        \nNote that the LaTex syntax for the symbols in your equation are different from Markdown syntax.\n\n## Code cells\nBy default, any new cell you create in a notebook will be a code cell.\n\nIn a code cell, you write code written in the language of the kernel you chose for your notebook. This is the language you selected when you created your notebook. It is usually displayed in the top right corner of the screen (under the \"Logout\" icon. If you write code written in any other language in a code cell, you will get errors when you try to run that cell.\n\nFor example, this is a Python 3 notebook, so the following code will work because it is written in the Python 3 language:\n\nBut the following code will not work, because it is written in the Stata language:\n\nThere are some kernels that will allow you to create notebooks that support multiple programming languages, but that is a more advanced topic and we will not cover it here.\n\nEach code cell can contain multiple lines of code.\n\nAnd the code in a particular code cell will recognize variables that were created in a different code cell (from above or below), as long as that cell has already been run. For example the following line of code knows what the variable \"a\" is (from the previous cell)\n\nTo the left of every code cell, you will see the order in which you **ran** them in the current session. For example, \"In [4]\" means this is the fourth code cell you ran in this session. Because at any time, you can run any code cell you want, the order in which you run them may not match the order in which they appear in the notebook. I highly recommend you NEVER use in a code cell variables that you define in a cell that appears lower in the notebook. Another way of saying that is to always assume that the code cells will be run in the order in which they appear in the notebook (even though that need not be the case).  \n\nFor example, don't run the following cell AFTER you run the one after it:\n\nNote that code cells don't always have an output. For example the line below does not seem to do anything when you run it, but it does assign the value 3 to variable b (we'll talk more about variables next class).\n\n# Important notebook commands\n\nAs mentioned above, after clicking on any command, you can press \"Enter\" to enter \"Edit mode\" (to be able to edit the contents of that cell) or \"Esc\" to enter \"Command mode\" which allows you to use keyboard shortcuts to ask Jupyter to do specific things.\n\nHere are some of the most common such commands (remember, these will not work unless you pressed \"Esc\" right before, to enter command mode):\n\n- press \"M\" to convert the current cell to a Markdown cell\n- press \"Y\" to convert the current cell to a Code cell\n- press \"A\" to insert a new cells right above the current cell\n- press \"B\" to insert a new cells below above the current cell\n- press \"C\" to copy the selected cells\n- press \"X\" to cut the selected cells\n- press \"V\" to past the selected cells\n- press \"D\" + \"D\" to delete selected cells\n- press \"Z\" to undo cell deletion\n- press \"Ctrl\" + \"Enter\" to run the selected cells\n- press \"0\" (zero, not the letter O) to restart your kernel (this \"forgets\" all the code you ran in the current session)\n\nTo see all the available commands, press \"Ctrl\" + \"Shift\" + \"P\"\n","srcMarkdownNoYaml":"\n\n# CELLS\nJupyter notebooks are split into \"cells\". \n\nIf you click anywhere inside a notebook, it will enclose the cell that you clicked on in a rectangle, to show you the exact contents of that cell (the cell may be empty). \n- You can then press \"Enter\" to edit the contents of that cell (the enclosing rectangle will change colors - from blue to green). \n- When you are done editing a cell, you can press \"Shift+Enter\" to run it. \n\nThe two types of cells that you will be using most often are: \n- Markdown cells\n    - Contain text in \"Markdown\" language (more on this below)\n    - Convert a cell to Markdown by clicking on it, and the pressing \"Esc\" and \"M\"\n- Code cells\n    - Contain code in language you specified by the notebook's \"kernel\" (more on this below)\n    - Convert a cell to Markdown by clicking on it, and the pressing \"Esc\" and \"Y\"\n\n\n\n## Markdown cells\nThese are cells where you write text. This cell is a Markdown cell. \nThink of Markdown as a lightweight version of Microsoft Word. \nIt allows you to format your text (indentation, bullet points, italics, etc) using pre-specified syntax (code) rather than clicking through menu items like in Work.\n\n\n## Markdown formatting\nThe following markdown cell shows you how to do basic formatting in Markdown \n\nHeaders:\n\n# Largest header\n## Second largest header\n### Third largers header\n\nLists (bullet points):\n\n- item \n    - subitem \n        - subsubitem\n        \n* item \n    * subitem \n        * subsubitem \n\nLists (numbered):\n\n1. item \n2. item \n\nLists (mixed):\n\n1. item\n    - subitem\n        - subsubitem\n            - subsubsubitem\n2. item\n    - subitem\n        - subsubitem\n            - subsubsubitem\n\nThis is how you do *italics* and this is how you do **bold**.\n\n### LaTex\nMarkdown also allows you to write mathematical formulas using LaTex syntax. \n\nFor example:\n\n$Y_{i,t} = \\alpha + \\beta X_{i,t} + \\epsilon_{i,t}$\n         \nWhich was written as \n\n         $Y_{i,t} = \\alpha + \\beta X_{i,t} + \\epsilon_{i,t}$\n\n        \nNote that the LaTex syntax for the symbols in your equation are different from Markdown syntax.\n\n## Code cells\nBy default, any new cell you create in a notebook will be a code cell.\n\nIn a code cell, you write code written in the language of the kernel you chose for your notebook. This is the language you selected when you created your notebook. It is usually displayed in the top right corner of the screen (under the \"Logout\" icon. If you write code written in any other language in a code cell, you will get errors when you try to run that cell.\n\nFor example, this is a Python 3 notebook, so the following code will work because it is written in the Python 3 language:\n\nBut the following code will not work, because it is written in the Stata language:\n\nThere are some kernels that will allow you to create notebooks that support multiple programming languages, but that is a more advanced topic and we will not cover it here.\n\nEach code cell can contain multiple lines of code.\n\nAnd the code in a particular code cell will recognize variables that were created in a different code cell (from above or below), as long as that cell has already been run. For example the following line of code knows what the variable \"a\" is (from the previous cell)\n\nTo the left of every code cell, you will see the order in which you **ran** them in the current session. For example, \"In [4]\" means this is the fourth code cell you ran in this session. Because at any time, you can run any code cell you want, the order in which you run them may not match the order in which they appear in the notebook. I highly recommend you NEVER use in a code cell variables that you define in a cell that appears lower in the notebook. Another way of saying that is to always assume that the code cells will be run in the order in which they appear in the notebook (even though that need not be the case).  \n\nFor example, don't run the following cell AFTER you run the one after it:\n\nNote that code cells don't always have an output. For example the line below does not seem to do anything when you run it, but it does assign the value 3 to variable b (we'll talk more about variables next class).\n\n# Important notebook commands\n\nAs mentioned above, after clicking on any command, you can press \"Enter\" to enter \"Edit mode\" (to be able to edit the contents of that cell) or \"Esc\" to enter \"Command mode\" which allows you to use keyboard shortcuts to ask Jupyter to do specific things.\n\nHere are some of the most common such commands (remember, these will not work unless you pressed \"Esc\" right before, to enter command mode):\n\n- press \"M\" to convert the current cell to a Markdown cell\n- press \"Y\" to convert the current cell to a Code cell\n- press \"A\" to insert a new cells right above the current cell\n- press \"B\" to insert a new cells below above the current cell\n- press \"C\" to copy the selected cells\n- press \"X\" to cut the selected cells\n- press \"V\" to past the selected cells\n- press \"D\" + \"D\" to delete selected cells\n- press \"Z\" to undo cell deletion\n- press \"Ctrl\" + \"Enter\" to run the selected cells\n- press \"0\" (zero, not the letter O) to restart your kernel (this \"forgets\" all the code you ran in the current session)\n\nTo see all the available commands, press \"Ctrl\" + \"Shift\" + \"P\"\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"lecture00_Jupyter_Basics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","theme":"zephyr","page-layout":"full","grid":{"sidebar-width":"400px"},"title":"L00: Jupyter basics"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}